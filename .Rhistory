makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ret<-makeVector(c(11,12,13,14,15))
cachemean(ret)
ret<-makeVector(c(12,12,14,14,15))
cachemean(ret)
rm(list=ls())
## Summary description of functions have been copied from the assignment website.
## makeCacheMatrix creates a special matrix object that can cache its inverse.
## cacheSolve computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cacheSolve would retrieve the inverse
## from the cache.
## makeCacheMatrix:
## Creates a special matrix that contain the following 4 functions to
## 1. Set value of the source matrix (setMatrix)
## 2. Get value of the source matrix (getMatrix)
## 3. Set value of the inverse of the source matrix (setInverseMatrix)
## 4. Get value of the inverse of the source matrix (getInverseMatrix)
makeCacheMatrix <- function(x = matrix()) {
inversedMatrix <- NULL
setMatrix <- function (mat) {
srcMatrix <<- mat
inversedMatrix <<- NULL
}
getMatrix <- function () {
srcMatrix
}
setInverseMatrix <- function (invMat) {
inversedMatrix <<- invMat
}
getInverseMatrix <- function () {
inversedMatrix
}
list (setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
## cacheSolve:
## calculates the inverse of the special matrix created in makeCacheMatrix.
## First checks if the inverse has been calculated. If so, gets the inverse from
## the cache and skip the computation. Otherwise, it calculates the inverse of
## the data and sets the value of the inverse matrix in the cache via the
## setInverseMatrix function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return invMatrix
} else {
srcMatrix <- x$getMatrix()
calcInverseMatrix <- solve(srcMatrix)
x$setInverseMatrix(calcInverseMatrix)
return calcInverseMatrix
}
}
## Summary description of functions have been copied from the assignment website.
## makeCacheMatrix creates a special matrix object that can cache its inverse.
## cacheSolve computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cacheSolve would retrieve the inverse
## from the cache.
## makeCacheMatrix:
## Creates a special matrix that contain the following 4 functions to
## 1. Set value of the source matrix (setMatrix)
## 2. Get value of the source matrix (getMatrix)
## 3. Set value of the inverse of the source matrix (setInverseMatrix)
## 4. Get value of the inverse of the source matrix (getInverseMatrix)
makeCacheMatrix <- function(x = matrix()) {
inversedMatrix <- NULL
setMatrix <- function (mat) {
srcMatrix <<- mat
inversedMatrix <<- NULL
}
getMatrix <- function () {
srcMatrix
}
setInverseMatrix <- function (invMat) {
inversedMatrix <<- invMat
}
getInverseMatrix <- function () {
inversedMatrix
}
list (setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
## cacheSolve:
## calculates the inverse of the special matrix created in makeCacheMatrix.
## First checks if the inverse has been calculated. If so, gets the inverse from
## the cache and skip the computation. Otherwise, it calculates the inverse of
## the data and sets the value of the inverse matrix in the cache via the
## setInverseMatrix function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return invMatrix
}
srcMatrix <- x$getMatrix()
calcInverseMatrix <- solve(srcMatrix)
x$setInverseMatrix(calcInverseMatrix)
return calcInverseMatrix
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return invMatrix
}
srcMatrix <- x$getMatrix()
calcInverseMatrix <- solve(srcMatrix)
x$setInverseMatrix(calcInverseMatrix)
return calcInverseMatrix
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
#     if (!is.null(invMatrix)) {
#         return invMatrix
#     }
#
#         srcMatrix <- x$getMatrix()
#         calcInverseMatrix <- solve(srcMatrix)
#         x$setInverseMatrix(calcInverseMatrix)
#         return calcInverseMatrix
}
#     if (!is.null(invMatrix)) {
#         return invMatrix
#     }
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return invMatrix
}
#
#         srcMatrix <- x$getMatrix()
#         calcInverseMatrix <- solve(srcMatrix)
#         x$setInverseMatrix(calcInverseMatrix)
#         return calcInverseMatrix
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return (invMatrix)
}
#
#         srcMatrix <- x$getMatrix()
#         calcInverseMatrix <- solve(srcMatrix)
#         x$setInverseMatrix(calcInverseMatrix)
#         return calcInverseMatrix
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return (invMatrix)
} else {
srcMatrix <- x$getMatrix()
calcInverseMatrix <- solve(srcMatrix)
x$setInverseMatrix(calcInverseMatrix)
return (calcInverseMatrix)
}
}
A = matrix(  c(2, 4, 1, 7), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE)
rm (A)
makeCacheMatrix(
matrix(  c(2, 4, 1, 7), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE) )
r<-makeCacheMatrix(
matrix(  c(2, 4, 1, 7), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE) )
cacheSolve(r)
makeCacheMatrix <- function(x = matrix()) {
inversedMatrix <- NULL
setMatrix <- function (mat) {
srcMatrix <<- mat
inversedMatrix <<- NULL
}
getMatrix <- function () srcMatrix
setInverseMatrix <- function (invMat) {
inversedMatrix <<- invMat
}
getInverseMatrix <- function () {
inversedMatrix
}
list (setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
r<-makeCacheMatrix(
matrix(  c(2, 4, 1, 7), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE) )
cacheSolve(r)
r<-makeCacheMatrix(
matrix(  c(2, 4, 1, 7), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE) )
cacheSolve(r)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return (invMatrix)
} else {
srcMatrix <- x$getMatrix()
#         calcInverseMatrix <- solve(srcMatrix)
#         x$setInverseMatrix(calcInverseMatrix)
#         return (calcInverseMatrix)
}
}
cacheSolve(r)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return (invMatrix)
}
srcMatrix <- x$getMatrix()
#         calcInverseMatrix <- solve(srcMatrix)
#         x$setInverseMatrix(calcInverseMatrix)
#         return (calcInverseMatrix)
#}
}
cacheSolve(r)
## Summary description of functions have been copied from the assignment website.
## makeCacheMatrix creates a special matrix object that can cache its inverse.
## cacheSolve computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cacheSolve would retrieve the inverse
## from the cache.
## makeCacheMatrix:
## Creates a special matrix that contain the following 4 functions to
## 1. Set value of the source matrix (setMatrix)
## 2. Get value of the source matrix (getMatrix)
## 3. Set value of the inverse of the source matrix (setInverseMatrix)
## 4. Get value of the inverse of the source matrix (getInverseMatrix)
makeCacheMatrix <- function(x = matrix()) {
inversedMatrix <- NULL
setMatrix <- function (mat) {
srcMatrix <<- mat
inversedMatrix <<- NULL
}
getMatrix <- function () 1#srcMatrix
setInverseMatrix <- function (invMat) {
inversedMatrix <<- invMat
}
getInverseMatrix <- function () {
inversedMatrix
}
list (setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
## cacheSolve:
## calculates the inverse of the special matrix created in makeCacheMatrix.
## First checks if the inverse has been calculated. If so, gets the inverse from
## the cache and skip the computation. Otherwise, it calculates the inverse of
## the data and sets the value of the inverse matrix in the cache via the
## setInverseMatrix function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return (invMatrix)
}
srcMatrix <- x$getMatrix()
#         calcInverseMatrix <- solve(srcMatrix)
#         x$setInverseMatrix(calcInverseMatrix)
#         return (calcInverseMatrix)
#}
}
r<-makeCacheMatrix(
matrix(  c(2, 4, 1, 7), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE) )
cacheSolve(r)
## Summary description of functions have been copied from the assignment website.
## makeCacheMatrix creates a special matrix object that can cache its inverse.
## cacheSolve computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cacheSolve would retrieve the inverse
## from the cache.
## makeCacheMatrix:
## Creates a special matrix that contain the following 4 functions to
## 1. Set value of the source matrix (setMatrix)
## 2. Get value of the source matrix (getMatrix)
## 3. Set value of the inverse of the source matrix (setInverseMatrix)
## 4. Get value of the inverse of the source matrix (getInverseMatrix)
makeCacheMatrix <- function(x = matrix()) {
inversedMatrix <- NULL
setMatrix <- function (mat) {
srcMatrix <<- mat
inversedMatrix <<- NULL
}
getMatrix <- function () matrix(c(1,1,1,1),nrow=2,ncol=2)
setInverseMatrix <- function (invMat) {
inversedMatrix <<- invMat
}
getInverseMatrix <- function () {
inversedMatrix
}
list (setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
## cacheSolve:
## calculates the inverse of the special matrix created in makeCacheMatrix.
## First checks if the inverse has been calculated. If so, gets the inverse from
## the cache and skip the computation. Otherwise, it calculates the inverse of
## the data and sets the value of the inverse matrix in the cache via the
## setInverseMatrix function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return (invMatrix)
}
srcMatrix <- x$getMatrix()
#         calcInverseMatrix <- solve(srcMatrix)
#         x$setInverseMatrix(calcInverseMatrix)
#         return (calcInverseMatrix)
#}
}
r<-makeCacheMatrix(
matrix(  c(2, 4, 1, 7), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE) )
cacheSolve(r)
## Summary description of functions have been copied from the assignment website.
## makeCacheMatrix creates a special matrix object that can cache its inverse.
## cacheSolve computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated (and
## the matrix has not changed), then the cacheSolve would retrieve the inverse
## from the cache.
## makeCacheMatrix:
## Creates a special matrix that contain the following 4 functions to
## 1. Set value of the source matrix (setMatrix)
## 2. Get value of the source matrix (getMatrix)
## 3. Set value of the inverse of the source matrix (setInverseMatrix)
## 4. Get value of the inverse of the source matrix (getInverseMatrix)
makeCacheMatrix <- function(x = matrix()) {
inversedMatrix <- NULL
setMatrix <- function (mat) {
srcMatrix <<- mat
inversedMatrix <<- NULL
}
getMatrix <- function () {
x # which is the original matrix
}
setInverseMatrix <- function (invMat) {
inversedMatrix <<- invMat
}
getInverseMatrix <- function () {
inversedMatrix
}
list (setMatrix = setMatrix,
getMatrix = getMatrix,
setInverseMatrix = setInverseMatrix,
getInverseMatrix = getInverseMatrix)
}
## cacheSolve:
## calculates the inverse of the special matrix created in makeCacheMatrix.
## First checks if the inverse has been calculated. If so, gets the inverse from
## the cache and skip the computation. Otherwise, it calculates the inverse of
## the data and sets the value of the inverse matrix in the cache via the
## setInverseMatrix function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invMatrix <- x$getInverseMatrix()
## check against cache, if the inverse is already there, skip computation
if (!is.null(invMatrix)) {
return (invMatrix)
} else {
srcMatrix <- x$getMatrix()
calcInverseMatrix <- solve(srcMatrix)
x$setInverseMatrix(calcInverseMatrix)
return (calcInverseMatrix)
}
}
r<-makeCacheMatrix(
matrix(  c(2, 4, 1, 7), # the data elements
nrow=2,              # number of rows
ncol=2,              # number of columns
byrow = TRUE) )
cacheSolve(r)
r<-makeCacheMatrix(
matrix(  rep(1,100), # the data elements
nrow=10,              # number of rows
ncol=10,              # number of columns
byrow = TRUE) )
cacheSolve(r)
rep(1,100)
matrix(  rep(1,100), # the data elements
nrow=10,              # number of rows
ncol=10,              # number of columns
byrow = TRUE)
matrix(  rep(c(1,2,3,4,5,6,7,8,9,10),100), # the data elements
nrow=10,              # number of rows
ncol=10,              # number of columns
byrow = TRUE) )
rep(c(1,2,3,4,5,6,7,8,9,10),10)
matrix(  rep(c(1,2,3,4,5,6,7,8,9,10),10), # the data elements
nrow=10,              # number of rows
ncol=10,              # number of columns
byrow = TRUE)
r<-makeCacheMatrix(
matrix(  rep(c(1,2,3,4,5,6,7,8,9,10),10), # the data elements
nrow=10,              # number of rows
ncol=10,              # number of columns
byrow = TRUE) )
cacheSolve(r)
?rand
?ran
?random
?randomise
?runif
runif(0,1)
runif(100,0,1)
r<-makeCacheMatrix(
matrix(  runif(100,0,1), # the data elements
nrow=10,              # number of rows
ncol=10,              # number of columns
byrow = TRUE) )
cacheSolve(r)
r$getMatrix()
r$getMatrix()
cacheSolve(r)
